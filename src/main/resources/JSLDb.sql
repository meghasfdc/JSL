-- noinspection SqlNoDataSourceInspectionForFile

-- noinspection SqlDialectInspectionForFile

-- A database for holding JSL output statistics
-- Created 3-22-2018
-- Author: M. Rossetti, rossetti@uark.edu
--
-- This design assumes that the model hierarchy cannot change during a simulation run
-- The model hierarchy could change between runs. This means that model elements
-- are associated with specific simulation runs (i.e. they are id dependent on simulation runs)
CREATE SCHEMA JSL_DB;

CREATE TABLE JSL_DB.SIMULATION_RUN (
	ID INTEGER NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
	SIM_NAME VARCHAR(510) NOT NULL,
	MODEL_NAME VARCHAR(510) NOT NULL,
	EXP_NAME VARCHAR(510) NOT NULL,
	EXP_START_TIME_STAMP TIMESTAMP,
	EXP_END_TIME_STAMP TIMESTAMP,
	NUM_REPS INTEGER NOT NULL CHECK (NUM_REPS >=1),
	LAST_REP INTEGER, 
	LENGTH_OF_REP DOUBLE PRECISION, 
	LENGTH_OF_WARM_UP DOUBLE PRECISION,
	HAS_MORE_REPS BOOLEAN,
	REP_ALLOWED_EXEC_TIME BIGINT,
	REP_INIT_OPTION BOOLEAN,
	RESET_START_STREAM_OPTION BOOLEAN,
	ANTITHETIC_OPTION BOOLEAN,
	ADV_NEXT_SUB_STREAM_OPTION BOOLEAN,
	NUM_STREAM_ADVANCES INTEGER
);

CREATE TABLE JSL_DB.MODEL_ELEMENT (
	SIM_RUN_ID_FK INTEGER NOT NULL,
	ELEMENT_ID INTEGER NOT NULL,
	ELEMENT_NAME VARCHAR(510) NOT NULL,
	CLASS_NAME VARCHAR(510) NOT NULL,
	PARENT_ID_FK INTEGER,
	PARENT_NAME VARCHAR(510),
	LEFT_COUNT INTEGER NOT NULL CHECK (LEFT_COUNT > 0),
	RIGHT_COUNT INTEGER NOT NULL CHECK (RIGHT_COUNT > 1),
	CONSTRAINT TRAVERSAL_ORDER_OKAY CHECK (LEFT_COUNT < RIGHT_COUNT)
);

ALTER TABLE JSL_DB.MODEL_ELEMENT
  ADD CONSTRAINT ME_PRIM_KY PRIMARY KEY (SIM_RUN_ID_FK, ELEMENT_ID);
  
ALTER TABLE JSL_DB.MODEL_ELEMENT
  ADD CONSTRAINT ME_NAME_UNIQUE UNIQUE (SIM_RUN_ID_FK, ELEMENT_NAME);
  
ALTER TABLE JSL_DB.MODEL_ELEMENT
	ADD CONSTRAINT ME_SIMRUN_FK FOREIGN KEY (SIM_RUN_ID_FK) REFERENCES JSL_DB.SIMULATION_RUN (ID);
	
CREATE INDEX ME_SIMRUN_FK_INDEX ON JSL_DB.MODEL_ELEMENT(SIM_RUN_ID_FK);
	
CREATE TABLE JSL_DB.WITHIN_REP_STAT (
	ID INTEGER NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
	ELEMENT_ID_FK INTEGER NOT NULL,
	SIM_RUN_ID_FK INTEGER NOT NULL,
	REP_NUM INTEGER NOT NULL CHECK (REP_NUM >=1),
	STAT_NAME VARCHAR(510),
	STAT_COUNT DOUBLE PRECISION CHECK (STAT_COUNT >=0),
	AVERAGE  DOUBLE PRECISION,
	MINIMUM  DOUBLE PRECISION,
	MAXIMUM  DOUBLE PRECISION,
	WEIGHTED_SUM  DOUBLE PRECISION,
	SUM_OF_WEIGHTS  DOUBLE PRECISION,
	WEIGHTED_SSQ DOUBLE PRECISION,
	LAST_VALUE DOUBLE PRECISION,
	LAST_WEIGHT DOUBLE PRECISION	
);

ALTER TABLE JSL_DB.WITHIN_REP_STAT 
	ADD CONSTRAINT WRS_SIMRUN_FK FOREIGN KEY (SIM_RUN_ID_FK) REFERENCES JSL_DB.SIMULATION_RUN (ID);

ALTER TABLE JSL_DB.WITHIN_REP_STAT
  ADD CONSTRAINT WRS_UNIQUE_ELEMENT_SIMRUN_REPNUM UNIQUE (ELEMENT_ID_FK, SIM_RUN_ID_FK, REP_NUM);
  
ALTER TABLE JSL_DB.WITHIN_REP_STAT
  ADD CONSTRAINT WRS_MODEL_ELEMENT_FK FOREIGN KEY (SIM_RUN_ID_FK, ELEMENT_ID_FK) REFERENCES JSL_DB.MODEL_ELEMENT (SIM_RUN_ID_FK, ELEMENT_ID);
  
CREATE INDEX WRS_ME_FK_INDEX ON JSL_DB.WITHIN_REP_STAT(SIM_RUN_ID_FK, ELEMENT_ID_FK);

CREATE TABLE JSL_DB.ACROSS_REP_STAT (
	ID INTEGER NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
	ELEMENT_ID_FK INTEGER NOT NULL,
	SIM_RUN_ID_FK INTEGER NOT NULL,
	STAT_NAME VARCHAR(510),
	STAT_COUNT DOUBLE PRECISION CHECK (STAT_COUNT >=0),
	AVERAGE  DOUBLE PRECISION,
	STD_DEV DOUBLE PRECISION CHECK (STD_DEV >=0),
	STD_ERR DOUBLE PRECISION CHECK (STD_ERR >=0),
	HALF_WIDTH DOUBLE PRECISION CHECK (HALF_WIDTH >=0),
	CONF_LEVEL DOUBLE PRECISION,
	MINIMUM  DOUBLE PRECISION,
	MAXIMUM  DOUBLE PRECISION,
	WEIGHTED_SUM  DOUBLE PRECISION,
	SUM_OF_WEIGHTS  DOUBLE PRECISION,
	WEIGHTED_SSQ DOUBLE PRECISION,
	DEV_SSQ DOUBLE PRECISION,
	LAST_VALUE DOUBLE PRECISION,
	LAST_WEIGHT DOUBLE PRECISION,
	KURTOSIS DOUBLE PRECISION,
	SKEWNESS DOUBLE PRECISION,
	LAG1_COV DOUBLE PRECISION,
	LAG1_CORR DOUBLE PRECISION,
	VON_NEUMAN_LAG1_STAT DOUBLE PRECISION,
	NUM_MISSING_OBS DOUBLE PRECISION
);

ALTER TABLE JSL_DB.ACROSS_REP_STAT 
	ADD CONSTRAINT ARS_SIMRUN_FK FOREIGN KEY (SIM_RUN_ID_FK) REFERENCES JSL_DB.SIMULATION_RUN (ID);

ALTER TABLE JSL_DB.ACROSS_REP_STAT
  ADD CONSTRAINT ARS_MODEL_ELEMENT_FK FOREIGN KEY (SIM_RUN_ID_FK, ELEMENT_ID_FK) REFERENCES JSL_DB.MODEL_ELEMENT (SIM_RUN_ID_FK, ELEMENT_ID);

CREATE INDEX ARS_ME_FK_INDEX ON JSL_DB.ACROSS_REP_STAT(SIM_RUN_ID_FK, ELEMENT_ID_FK);

CREATE TABLE JSL_DB.WITHIN_REP_COUNTER_STAT (
	ID INTEGER NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
	ELEMENT_ID_FK INTEGER NOT NULL,
	SIM_RUN_ID_FK INTEGER NOT NULL,
	REP_NUM INTEGER NOT NULL CHECK (REP_NUM >=1),
	STAT_NAME VARCHAR(510),
	LAST_VALUE DOUBLE PRECISION	
);

ALTER TABLE JSL_DB.WITHIN_REP_COUNTER_STAT 
	ADD CONSTRAINT WRCS_SIMRUN_FK FOREIGN KEY (SIM_RUN_ID_FK) REFERENCES JSL_DB.SIMULATION_RUN (ID);

ALTER TABLE JSL_DB.WITHIN_REP_COUNTER_STAT
  ADD CONSTRAINT WRCS_UNIQUE_ELEMENT_SIMRUN_REPNUM UNIQUE (ELEMENT_ID_FK, SIM_RUN_ID_FK, REP_NUM);

ALTER TABLE JSL_DB.WITHIN_REP_COUNTER_STAT
  ADD CONSTRAINT WRCS_MODEL_ELEMENT_FK FOREIGN KEY (SIM_RUN_ID_FK, ELEMENT_ID_FK) REFERENCES JSL_DB.MODEL_ELEMENT (SIM_RUN_ID_FK, ELEMENT_ID);

CREATE INDEX WRCS_ME_FK_INDEX ON JSL_DB.WITHIN_REP_COUNTER_STAT(SIM_RUN_ID_FK, ELEMENT_ID_FK);

CREATE TABLE JSL_DB.BATCH_STAT (
	ID INTEGER NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
	ELEMENT_ID_FK INTEGER NOT NULL,
	SIM_RUN_ID_FK INTEGER NOT NULL,
	REP_NUM INTEGER NOT NULL CHECK (REP_NUM >=1),
	STAT_NAME VARCHAR(510),
	STAT_COUNT DOUBLE PRECISION CHECK (STAT_COUNT >=0),
	AVERAGE  DOUBLE PRECISION,
	STD_DEV DOUBLE PRECISION CHECK (STD_DEV >=0),
	STD_ERR DOUBLE PRECISION CHECK (STD_ERR >=0),
	HALF_WIDTH DOUBLE PRECISION CHECK (HALF_WIDTH >=0),
	CONF_LEVEL DOUBLE PRECISION,
	MINIMUM  DOUBLE PRECISION,
	MAXIMUM  DOUBLE PRECISION,
	WEIGHTED_SUM  DOUBLE PRECISION,
	SUM_OF_WEIGHTS  DOUBLE PRECISION,
	WEIGHTED_SSQ DOUBLE PRECISION,
	DEV_SSQ DOUBLE PRECISION,
	LAST_VALUE DOUBLE PRECISION,
	LAST_WEIGHT DOUBLE PRECISION,
	KURTOSIS DOUBLE PRECISION,
	SKEWNESS DOUBLE PRECISION,
	LAG1_COV DOUBLE PRECISION,
	LAG1_CORR DOUBLE PRECISION,
	VON_NEUMAN_LAG1_STAT DOUBLE PRECISION,
	NUM_MISSING_OBS DOUBLE PRECISION,
	MIN_BATCH_SIZE DOUBLE PRECISION,
	MIN_NUM_BATCHES DOUBLE PRECISION,
	MAX_NUM_BATCHES_MULTIPLE DOUBLE PRECISION,
	MAX_NUM_BATCHES DOUBLE PRECISION,
	NUM_REBATCHES DOUBLE PRECISION,
	CURRENT_BATCH_SIZE DOUBLE PRECISION,
	AMT_UNBATCHED DOUBLE PRECISION,
	TOTAL_NUM_OBS DOUBLE PRECISION
);

ALTER TABLE JSL_DB.BATCH_STAT
	ADD CONSTRAINT BS_SIMRUN_FK FOREIGN KEY (SIM_RUN_ID_FK) REFERENCES JSL_DB.SIMULATION_RUN (ID);

ALTER TABLE JSL_DB.BATCH_STAT
  ADD CONSTRAINT BS_MODEL_ELEMENT_FK FOREIGN KEY (SIM_RUN_ID_FK, ELEMENT_ID_FK) REFERENCES JSL_DB.MODEL_ELEMENT (SIM_RUN_ID_FK, ELEMENT_ID);

CREATE INDEX BS_ME_FK_INDEX ON JSL_DB.BATCH_STAT(SIM_RUN_ID_FK, ELEMENT_ID_FK);

CREATE VIEW JSL_DB.WITHIN_REP_RESPONSE_VIEW (SIM_RUN_ID_FK, EXP_NAME, ELEMENT_NAME, STAT_NAME, REP_NUM, AVERAGE)
  AS (SELECT JSL_DB.WITHIN_REP_STAT.SIM_RUN_ID_FK, EXP_NAME, ELEMENT_NAME, STAT_NAME, REP_NUM, AVERAGE
      FROM (JSL_DB.SIMULATION_RUN JOIN JSL_DB.WITHIN_REP_STAT on JSL_DB.SIMULATION_RUN.ID = JSL_DB.WITHIN_REP_STAT.SIM_RUN_ID_FK)
        JOIN JSL_DB.MODEL_ELEMENT ON ELEMENT_ID = JSL_DB.WITHIN_REP_STAT.ELEMENT_ID_FK);
       
CREATE VIEW JSL_DB.WITHIN_REP_COUNTER_VIEW (SIM_RUN_ID_FK, EXP_NAME, ELEMENT_NAME, STAT_NAME, REP_NUM, LAST_VALUE)
  AS (SELECT JSL_DB.WITHIN_REP_COUNTER_STAT.SIM_RUN_ID_FK, EXP_NAME, ELEMENT_NAME, STAT_NAME, REP_NUM, LAST_VALUE
     FROM (JSL_DB.SIMULATION_RUN JOIN JSL_DB.WITHIN_REP_COUNTER_STAT on JSL_DB.SIMULATION_RUN.ID = JSL_DB.WITHIN_REP_COUNTER_STAT.SIM_RUN_ID_FK)
       JOIN JSL_DB.MODEL_ELEMENT ON ELEMENT_ID = JSL_DB.WITHIN_REP_COUNTER_STAT.ELEMENT_ID_FK);
       
CREATE VIEW JSL_DB.ACROSS_REP_VIEW (SIM_RUN_ID_FK, EXP_NAME, ELEMENT_NAME, STAT_NAME, STAT_COUNT, AVERAGE, STD_DEV)
AS (SELECT JSL_DB.ACROSS_REP_STAT.SIM_RUN_ID_FK, EXP_NAME, ELEMENT_NAME, STAT_NAME, STAT_COUNT, AVERAGE, STD_DEV
FROM (JSL_DB.SIMULATION_RUN JOIN JSL_DB.ACROSS_REP_STAT on JSL_DB.SIMULATION_RUN.ID = JSL_DB.ACROSS_REP_STAT.SIM_RUN_ID_FK)
  JOIN JSL_DB.MODEL_ELEMENT ON ELEMENT_ID = JSL_DB.ACROSS_REP_STAT.ELEMENT_ID_FK);       

CREATE VIEW JSL_DB.BATCH_STAT_VIEW (SIM_RUN_ID_FK, EXP_NAME, ELEMENT_NAME, STAT_NAME, STAT_COUNT, AVERAGE, STD_DEV)
  AS (SELECT JSL_DB.BATCH_STAT.SIM_RUN_ID_FK, EXP_NAME, ELEMENT_NAME, STAT_NAME, STAT_COUNT, AVERAGE, STD_DEV
     FROM (JSL_DB.SIMULATION_RUN JOIN JSL_DB.BATCH_STAT on JSL_DB.SIMULATION_RUN.ID = JSL_DB.BATCH_STAT.SIM_RUN_ID_FK)
       JOIN JSL_DB.MODEL_ELEMENT ON ELEMENT_ID = JSL_DB.BATCH_STAT.ELEMENT_ID_FK);

CREATE VIEW JSL_DB.WITHIN_REP_VIEW (SIM_RUN_ID_FK, EXP_NAME, ELEMENT_NAME, STAT_NAME, REP_NUM, VALUE) AS
       (SELECT JSL_DB.WITHIN_REP_STAT.SIM_RUN_ID_FK, EXP_NAME, ELEMENT_NAME, STAT_NAME, REP_NUM, AVERAGE AS VALUE
FROM (JSL_DB.SIMULATION_RUN JOIN JSL_DB.WITHIN_REP_STAT on JSL_DB.SIMULATION_RUN.ID = JSL_DB.WITHIN_REP_STAT.SIM_RUN_ID_FK)
       JOIN JSL_DB.MODEL_ELEMENT ON ELEMENT_ID = JSL_DB.WITHIN_REP_STAT.ELEMENT_ID_FK
UNION
SELECT JSL_DB.WITHIN_REP_COUNTER_STAT.SIM_RUN_ID_FK, EXP_NAME, ELEMENT_NAME, STAT_NAME, REP_NUM, LAST_VALUE as VALUE
FROM (JSL_DB.SIMULATION_RUN JOIN JSL_DB.WITHIN_REP_COUNTER_STAT on JSL_DB.SIMULATION_RUN.ID = JSL_DB.WITHIN_REP_COUNTER_STAT.SIM_RUN_ID_FK)
            JOIN JSL_DB.MODEL_ELEMENT ON ELEMENT_ID = JSL_DB.WITHIN_REP_COUNTER_STAT.ELEMENT_ID_FK);  