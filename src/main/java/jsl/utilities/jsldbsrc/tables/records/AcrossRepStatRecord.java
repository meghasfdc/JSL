/*
 * This file is generated by jOOQ.
*/
package jsl.utilities.jsldbsrc.tables.records;


import javax.annotation.Generated;

import jsl.utilities.jsldbsrc.tables.AcrossRepStat;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AcrossRepStatRecord extends UpdatableRecordImpl<AcrossRepStatRecord> {

    private static final long serialVersionUID = -1390967034;

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.ELEMENT_ID_FK</code>.
     */
    public void setElementIdFk(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.ELEMENT_ID_FK</code>.
     */
    public Integer getElementIdFk() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.SIM_RUN_ID_FK</code>.
     */
    public void setSimRunIdFk(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.SIM_RUN_ID_FK</code>.
     */
    public Integer getSimRunIdFk() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.STAT_NAME</code>.
     */
    public void setStatName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.STAT_NAME</code>.
     */
    public String getStatName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.STAT_COUNT</code>.
     */
    public void setStatCount(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.STAT_COUNT</code>.
     */
    public Double getStatCount() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.AVERAGE</code>.
     */
    public void setAverage(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.AVERAGE</code>.
     */
    public Double getAverage() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.STD_DEV</code>.
     */
    public void setStdDev(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.STD_DEV</code>.
     */
    public Double getStdDev() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.STD_ERR</code>.
     */
    public void setStdErr(Double value) {
        set(7, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.STD_ERR</code>.
     */
    public Double getStdErr() {
        return (Double) get(7);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.HALF_WIDTH</code>.
     */
    public void setHalfWidth(Double value) {
        set(8, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.HALF_WIDTH</code>.
     */
    public Double getHalfWidth() {
        return (Double) get(8);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.CONF_LEVEL</code>.
     */
    public void setConfLevel(Double value) {
        set(9, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.CONF_LEVEL</code>.
     */
    public Double getConfLevel() {
        return (Double) get(9);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.MINIMUM</code>.
     */
    public void setMinimum(Double value) {
        set(10, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.MINIMUM</code>.
     */
    public Double getMinimum() {
        return (Double) get(10);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.MAXIMUM</code>.
     */
    public void setMaximum(Double value) {
        set(11, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.MAXIMUM</code>.
     */
    public Double getMaximum() {
        return (Double) get(11);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.WEIGHTED_SUM</code>.
     */
    public void setWeightedSum(Double value) {
        set(12, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.WEIGHTED_SUM</code>.
     */
    public Double getWeightedSum() {
        return (Double) get(12);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.SUM_OF_WEIGHTS</code>.
     */
    public void setSumOfWeights(Double value) {
        set(13, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.SUM_OF_WEIGHTS</code>.
     */
    public Double getSumOfWeights() {
        return (Double) get(13);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.WEIGHTED_SSQ</code>.
     */
    public void setWeightedSsq(Double value) {
        set(14, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.WEIGHTED_SSQ</code>.
     */
    public Double getWeightedSsq() {
        return (Double) get(14);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.DEV_SSQ</code>.
     */
    public void setDevSsq(Double value) {
        set(15, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.DEV_SSQ</code>.
     */
    public Double getDevSsq() {
        return (Double) get(15);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.LAST_VALUE</code>.
     */
    public void setLastValue(Double value) {
        set(16, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.LAST_VALUE</code>.
     */
    public Double getLastValue() {
        return (Double) get(16);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.LAST_WEIGHT</code>.
     */
    public void setLastWeight(Double value) {
        set(17, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.LAST_WEIGHT</code>.
     */
    public Double getLastWeight() {
        return (Double) get(17);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.KURTOSIS</code>.
     */
    public void setKurtosis(Double value) {
        set(18, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.KURTOSIS</code>.
     */
    public Double getKurtosis() {
        return (Double) get(18);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.SKEWNESS</code>.
     */
    public void setSkewness(Double value) {
        set(19, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.SKEWNESS</code>.
     */
    public Double getSkewness() {
        return (Double) get(19);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.LAG1_COV</code>.
     */
    public void setLag1Cov(Double value) {
        set(20, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.LAG1_COV</code>.
     */
    public Double getLag1Cov() {
        return (Double) get(20);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.LAG1_CORR</code>.
     */
    public void setLag1Corr(Double value) {
        set(21, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.LAG1_CORR</code>.
     */
    public Double getLag1Corr() {
        return (Double) get(21);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.VON_NEUMAN_LAG1_STAT</code>.
     */
    public void setVonNeumanLag1Stat(Double value) {
        set(22, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.VON_NEUMAN_LAG1_STAT</code>.
     */
    public Double getVonNeumanLag1Stat() {
        return (Double) get(22);
    }

    /**
     * Setter for <code>JSL_DB.ACROSS_REP_STAT.NUM_MISSING_OBS</code>.
     */
    public void setNumMissingObs(Double value) {
        set(23, value);
    }

    /**
     * Getter for <code>JSL_DB.ACROSS_REP_STAT.NUM_MISSING_OBS</code>.
     */
    public Double getNumMissingObs() {
        return (Double) get(23);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AcrossRepStatRecord
     */
    public AcrossRepStatRecord() {
        super(AcrossRepStat.ACROSS_REP_STAT);
    }

    /**
     * Create a detached, initialised AcrossRepStatRecord
     */
    public AcrossRepStatRecord(Integer id, Integer elementIdFk, Integer simRunIdFk, String statName, Double statCount, Double average, Double stdDev, Double stdErr, Double halfWidth, Double confLevel, Double minimum, Double maximum, Double weightedSum, Double sumOfWeights, Double weightedSsq, Double devSsq, Double lastValue, Double lastWeight, Double kurtosis, Double skewness, Double lag1Cov, Double lag1Corr, Double vonNeumanLag1Stat, Double numMissingObs) {
        super(AcrossRepStat.ACROSS_REP_STAT);

        set(0, id);
        set(1, elementIdFk);
        set(2, simRunIdFk);
        set(3, statName);
        set(4, statCount);
        set(5, average);
        set(6, stdDev);
        set(7, stdErr);
        set(8, halfWidth);
        set(9, confLevel);
        set(10, minimum);
        set(11, maximum);
        set(12, weightedSum);
        set(13, sumOfWeights);
        set(14, weightedSsq);
        set(15, devSsq);
        set(16, lastValue);
        set(17, lastWeight);
        set(18, kurtosis);
        set(19, skewness);
        set(20, lag1Cov);
        set(21, lag1Corr);
        set(22, vonNeumanLag1Stat);
        set(23, numMissingObs);
    }
}
